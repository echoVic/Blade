/**
 * 主题生成器CLI工具
 * 用于生成、导出和管理主题
 */

import { Command } from 'commander';
import fs from 'fs';
import path from 'path';
import { builtinThemes } from '../themes/builtin-themes';
import ThemeValidator from '../themes/theme-validator';
import type { ThemeConfig, DesignTokens } from '../types/design-tokens';

export class ThemeGenerator {
  private program: Command;
  private validator: ThemeValidator;

  constructor() {
    this.program = new Command();
    this.validator = new ThemeValidator();
    this.setupCommands();
  }

  /**
   * 设置CLI命令
   */
  private setupCommands(): void {
    this.program
      .name('theme-generator')
      .description('Blade UI主题生成器')
      .version('1.0.0');

    this.program
      .command('list')
      .description('列出所有内置主题')
      .action(() => this.listThemes());

    this.program
      .command('export')
      .description('导出主题')
      .argument('<theme-id>', '主题ID')
      .option('-f, --format <format>', '输出格式 (json|css|scss)', 'json')
      .option('-o, --output <file>', '输出文件路径')
      .action((themeId, options) => this.exportTheme(themeId, options));

    this.program
      .command('create')
      .description('创建新主题')
      .argument('<name>', '主题名称')
      .option('-b, --base <theme-id>', '基础主题', 'default')
      .option('-o, --output <file>', '输出文件路径')
      .action((name, options) => this.createTheme(name, options));

    this.program
      .command('validate')
      .description('验证主题文件')
      .argument('<file>', '主题文件路径')
      .action((file) => this.validateTheme(file));

    this.program
      .command('customize')
      .description('自定义主题颜色')
      .argument('<theme-id>', '基础主题ID')
      .option('-c, --colors <colors>', '颜色配置 (JSON格式)')
      .option('-o, --output <file>', '输出文件路径')
      .action((themeId, options) => this.customizeTheme(themeId, options));
  }

  /**
   * 列出所有内置主题
   */
  private listThemes(): void {
    console.log('内置主题列表:');
    console.log('================');
    
    Object.entries(builtinThemes).forEach(([id, theme]) => {
      console.log(`- ${id}: ${theme.name} (${theme.description})`);
    });
  }

  /**
   * 导出主题
   */
  private exportTheme(themeId: string, options: { format: string; output?: string }): void {
    const theme = builtinThemes[themeId];
    if (!theme) {
      console.error(`错误: 找不到主题 '${themeId}'`);
      process.exit(1);
    }

    let output: string;
    
    switch (options.format) {
      case 'json':
        output = JSON.stringify(theme, null, 2);
        break;
      case 'css':
        output = this.convertToCSS(theme);
        break;
      case 'scss':
        output = this.convertToSCSS(theme);
        break;
      default:
        console.error(`错误: 不支持的格式 '${options.format}'`);
        process.exit(1);
    }

    if (options.output) {
      fs.writeFileSync(options.output, output);
      console.log(`主题已导出到: ${options.output}`);
    } else {
      console.log(output);
    }
  }

  /**
   * 创建新主题
   */
  private createTheme(name: string, options: { base: string; output?: string }): void {
    const baseTheme = builtinThemes[options.base];
    if (!baseTheme) {
      console.error(`错误: 找不到基础主题 '${options.base}'`);
      process.exit(1);
    }

    const newTheme: ThemeConfig = {
      ...baseTheme,
      id: this.generateThemeId(name),
      name,
      description: `自定义主题: ${name}`,
      version: '1.0.0',
      author: 'Generated by ThemeGenerator',
    };

    const output = JSON.stringify(newTheme, null, 2);
    
    if (options.output) {
      fs.writeFileSync(options.output, output);
      console.log(`新主题已创建: ${options.output}`);
    } else {
      console.log(output);
    }
  }

  /**
   * 验证主题文件
   */
  private validateTheme(filePath: string): void {
    try {
      const fileContent = fs.readFileSync(filePath, 'utf8');
      const theme: ThemeConfig = JSON.parse(fileContent);
      
      const result = this.validator.validateTheme(theme);
      
      if (result.isValid) {
        console.log('✓ 主题验证通过');
      } else {
        console.log('✗ 主题验证失败');
        console.log(`错误: ${result.errors.length}`);
        console.log(`警告: ${result.warnings.length}`);
        console.log(`建议: ${result.recommendations.length}`);
        
        if (result.errors.length > 0) {
          console.log('\n错误详情:');
          result.errors.forEach(error => {
            console.log(`  - ${error.path}: ${error.message}`);
          });
        }
        
        if (result.warnings.length > 0) {
          console.log('\n警告详情:');
          result.warnings.forEach(warning => {
            console.log(`  - ${warning.path}: ${warning.message}`);
          });
        }
      }
    } catch (error) {
      console.error(`验证失败: ${error instanceof Error ? error.message : '未知错误'}`);
      process.exit(1);
    }
  }

  /**
   * 自定义主题
   */
  private customizeTheme(themeId: string, options: { colors?: string; output?: string }): void {
    const baseTheme = builtinThemes[themeId];
    if (!baseTheme) {
      console.error(`错误: 找不到基础主题 '${themeId}'`);
      process.exit(1);
    }

    let customColors: Partial<DesignTokens['colors']> = {};
    
    if (options.colors) {
      try {
        customColors = JSON.parse(options.colors);
      } catch (error) {
        console.error(`错误: 颜色配置格式无效`);
        process.exit(1);
      }
    }

    const newTheme: ThemeConfig = {
      ...baseTheme,
      tokens: {
        ...baseTheme.tokens,
        colors: {
          ...baseTheme.tokens.colors,
          ...customColors,
        },
      },
    };

    const output = JSON.stringify(newTheme, null, 2);
    
    if (options.output) {
      fs.writeFileSync(options.output, output);
      console.log(`自定义主题已创建: ${options.output}`);
    } else {
      console.log(output);
    }
  }

  /**
   * 转换为主题到CSS变量
   */
  private convertToCSS(theme: ThemeConfig): string {
    let css = `/* ${theme.name} 主题 */\n`;
    css += ':root {\n';
    
    // 转换颜色令牌
    css += this.convertColorsToCSS(theme.tokens.colors);
    
    // 转换排版令牌
    css += this.convertTypographyToCSS(theme.tokens.typography);
    
    // 转换间距令牌
    css += this.convertSpacingToCSS(theme.tokens.spacing);
    
    css += '}\n';
    return css;
  }

  /**
   * 转换颜色令牌到CSS变量
   */
  private convertColorsToCSS(colors: DesignTokens['colors']): string {
    let css = '';
    
    // 基础颜色
    css += `  --color-white: ${colors.base.white};\n`;
    css += `  --color-black: ${colors.base.black};\n`;
    
    // 灰度调色板
    Object.entries(colors.base.gray).forEach(([key, value]) => {
      css += `  --color-gray-${key}: ${value};\n`;
    });
    
    // 语义化颜色
    Object.entries(colors.semantic).forEach(([category, scale]) => {
      Object.entries(scale).forEach(([key, value]) => {
        css += `  --color-${category}-${key}: ${value};\n`;
      });
    });
    
    // 功能性颜色
    Object.entries(colors.functional).forEach(([category, values]) => {
      if (typeof values === 'object') {
        Object.entries(values).forEach(([key, value]) => {
          css += `  --color-${category}-${key}: ${value};\n`;
        });
      }
    });
    
    return css;
  }

  /**
   * 转换排版令牌到CSS变量
   */
  private convertTypographyToCSS(typography: DesignTokens['typography']): string {
    let css = '';
    
    // 字体族
    css += `  --font-sans: ${typography.fontFamily.sans.join(', ')};\n`;
    css += `  --font-serif: ${typography.fontFamily.serif.join(', ')};\n`;
    css += `  --font-mono: ${typography.fontFamily.mono.join(', ')};\n`;
    
    // 字体大小
    Object.entries(typography.fontSize).forEach(([key, value]) => {
      css += `  --font-size-${key}: ${value}rem;\n`;
    });
    
    // 字体粗细
    Object.entries(typography.fontWeight).forEach(([key, value]) => {
      css += `  --font-weight-${key}: ${value};\n`;
    });
    
    return css;
  }

  /**
   * 转换间距令牌到CSS变量
   */
  private convertSpacingToCSS(spacing: DesignTokens['spacing']): string {
    let css = '';
    
    // 基础间距
    Object.entries(spacing.base).forEach(([key, value]) => {
      css += `  --spacing-${key}: ${value}rem;\n`;
    });
    
    return css;
  }

  /**
   * 转换为主题到SCSS变量
   */
  private convertToSCSS(theme: ThemeConfig): string {
    let scss = `// ${theme.name} 主题\n`;
    
    // 转换颜色令牌
    scss += this.convertColorsToSCSS(theme.tokens.colors);
    
    // 转换排版令牌
    scss += this.convertTypographyToSCSS(theme.tokens.typography);
    
    // 转换间距令牌
    scss += this.convertSpacingToSCSS(theme.tokens.spacing);
    
    return scss;
  }

  /**
   * 转换颜色令牌到SCSS变量
   */
  private convertColorsToSCSS(colors: DesignTokens['colors']): string {
    let scss = '';
    
    // 基础颜色
    scss += `$color-white: ${colors.base.white};\n`;
    scss += `$color-black: ${colors.base.black};\n\n`;
    
    // 灰度调色板
    scss += '$color-gray: (\n';
    Object.entries(colors.base.gray).forEach(([key, value]) => {
      scss += `  ${key}: ${value},\n`;
    });
    scss += ');\n\n';
    
    // 语义化颜色
    Object.entries(colors.semantic).forEach(([category, scale]) => {
      scss += `$color-${category}: (\n`;
      Object.entries(scale).forEach(([key, value]) => {
        scss += `  ${key}: ${value},\n`;
      });
      scss += ');\n\n';
    });
    
    return scss;
  }

  /**
   * 转换排版令牌到SCSS变量
   */
  private convertTypographyToSCSS(typography: DesignTokens['typography']): string {
    let scss = '';
    
    // 字体族
    scss += `$font-sans: (${typography.fontFamily.sans.map(f => `'${f}'`).join(', ')});\n`;
    scss += `$font-serif: (${typography.fontFamily.serif.map(f => `'${f}'`).join(', ')});\n`;
    scss += `$font-mono: (${typography.fontFamily.mono.map(f => `'${f}'`).join(', ')});\n\n`;
    
    // 字体大小
    scss += '$font-size: (\n';
    Object.entries(typography.fontSize).forEach(([key, value]) => {
      scss += `  ${key}: ${value}rem,\n`;
    });
    scss += ');\n\n';
    
    return scss;
  }

  /**
   * 转换间距令牌到SCSS变量
   */
  private convertSpacingToSCSS(spacing: DesignTokens['spacing']): string {
    let scss = '';
    
    // 基础间距
    scss += '$spacing: (\n';
    Object.entries(spacing.base).forEach(([key, value]) => {
      scss += `  ${key}: ${value}rem,\n`;
    });
    scss += ');\n\n';
    
    return scss;
  }

  /**
   * 生成主题ID
   */
  private generateThemeId(name: string): string {
    return name
      .toLowerCase()
      .replace(/[^a-z0-9]+/g, '-')
      .replace(/^-+|-+$/g, '');
  }

  /**
   * 运行CLI程序
   */
  public run(): void {
    this.program.parse();
  }
}

// 如果直接运行此文件，则执行CLI程序
if (require.main === module) {
  const generator = new ThemeGenerator();
  generator.run();
}

export default ThemeGenerator;